"""
Scoring system models
"""

from sqlalchemy import Column, String, Text, DateTime, ForeignKey, Numeric
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid

from app.core.database import Base


class Score(Base):
    """Score model for AI-powered candidate evaluation"""
    __tablename__ = "scores"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    application_id = Column(UUID(as_uuid=True), ForeignKey("applications.id", ondelete="CASCADE"), nullable=False)
    category = Column(String, nullable=False)  # technical, communication, cultural_fit, cognitive, behavioral
    score = Column(Numeric(5, 2), nullable=False)  # score from 0.00 to 100.00
    confidence = Column(Numeric(5, 2), nullable=True)  # confidence from 0.00 to 100.00
    reasoning = Column(Text, nullable=True)  # AI explanation for the score
    evidence = Column(JSONB, default=[])  # supporting evidence for the score
    created_by = Column(String, nullable=True)  # 'ai' or user_id for manual scores
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # Relationships
    application = relationship("Application", back_populates="scores")

    def __repr__(self):
        return f"<Score(id={self.id}, category='{self.category}', score={self.score}, confidence={self.confidence})>"

    @property
    def is_ai_generated(self):
        """Check if score was generated by AI"""
        return self.created_by == 'ai'

    @property
    def score_grade(self):
        """Convert numeric score to letter grade"""
        if self.score >= 90:
            return 'A'
        elif self.score >= 80:
            return 'B'
        elif self.score >= 70:
            return 'C'
        elif self.score >= 60:
            return 'D'
        else:
            return 'F'